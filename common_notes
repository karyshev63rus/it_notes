Notes
=====

26 декабря 2020 г.
------------------
Продолжается изучение PostgreSQL. Требования к СУБД в плане проведения транзакций (ACID) - атомарность, согласованность, изолированность, долговечность (надежность).
Начинается ознакомление с "Приложением 12 факторов" - требованиями к разработке и развертыванию современого программного софта в виде веб-приложений:
I. Кодовая база: одна кодовая база, отслеживаемая системой контроля версий, и множество развертываний; 
II. Зависимости: явно объявляйте и изолируйте зависимости;
III. Конфигурация: сохраняйте конфигурацию в среде выполнения;
IV. Сторонние службы: считайте сторонные службы подключаемыми ресурсами;
V. Сборка, релиз, выполнение: строго разграничивайте сборку и выполнение;
VI. Процессы: запускайте приложение как один или несколько процессов не сохраняющих внутреннее состояние;

27 декабря 2020 г.
------------------
Еще три фактора 12-факторного приложения:
VII. Привязка портов: экспортируйте сервисы через привязку портов;
VIII. Параллелизм: масштабируйте приложение с помощью процессов;
XI. Утилизируемость: максимизируйте надежность с помощью быстрого запуска и корректного завершения работы;
Масштабируемость - способность системы, сети или процесса реагировать на изменение рабочей нагрузки; регулировать степень использования ресурсов (запускать новые или останавливать работающие процессы) в зависимости от поступления новых задач;
Запустил на linux приложение на основе  Dockerfile и docker-compose; на винде установил подсистему Ubuntu20.04 и также запустил приложение, собрав образ из докер-файла. Пробросил порты и открыл в браузере на хост-машине.

28 декабря 2020 г.
------------------
Последние три фактора из Приложения 12-ти факторов:
X. Паритет разработки/работы приложения: держите окружение разработки, промежуточного развертывания и рабочего развертывания максимально похожими;
XI. Журналирование: рассматривайте журнал как поток событий;
XII. Задачи администрирования: выполняйте задачи администрирования/управления с помощью разовых процессов
Пытался запустить контейнер с приложением (отключенным от SQLite3) совместно с контейнером на основе Postgresql путем сборки на основе файла docker-compose.yml - не получилось. Но получилось просто запустить приложение с подключением его к PG (для чего специально создал postgres-базу данных).
UPD. Запустить удалось, прописав в docker-compose файле две строки (под строкой image: postgresql:12 и с тем же отступом - нашел их в репо книги на гитхабе):
    enviroment:
    - "POSTGRES_HOST_AUTH_METHOD=trust"

29 декабря 2020 г.
------------------
Продолжаю изучать книгу Django for professionals. Освоил 3-ю главу, где создается кастомная модель пользователя (правда, пока непонятно, зачем она нужна): пока это привело только к изменению внешнего вида административной страницы сайта. Пробовал поставить chrome на ubuntu-подсистему винды; не удалось, но зато выяснил, как решать проблемы с недопоставившимися пакетами (см. в  файле linux_notes).

30 декабря 2020 г.
------------------
Освоил 4-ю и 5-ю главы книги (посвящены шаблонам, тестированию, входу-выходу и регистрации). Удобно работать с запушенным в фоне docker-compose: командой docker-compose exec web python manage.py tests users можно запускать тесты  конкретно приложения test без остановки запущенных контейнеров.
О проблеме подключения контейнера с  django к базе данных postgres на локальном сервере (тот, что запускается с pgAdmin4): подключить удается только тот контейнер, что создан в "правильной" виндовской среде (через cmd-консоль); контейнер, созданный в линуксовском окружении, не подлючается (через команду ps aux даже не  выявляются процессы с названием, включающим 'postgres').

31 декабря 2020 г.
------------------
Изучил еще две главы: 6 и 7 - про подключение статистических файлов и кастомную регистрацию, соответственно. Не обошлось без bootstrap4 (изучение этого фреймворка еще впереди - уже скачан нужный курс от WebForMyself).

1 января 2021 г.
----------------
Изучил главы 8, 9 и 10: соответственно, о переменных окружения, настройке почты и об использовании UUID в качестве первичного ключа. Переменные поключил сначала через опцию "- environment" в файле docker-compose, а затем через dotenv (привет Devman). Для почты использовал второй gmail-овский ящик. При использовании UUID в качестве первичного ключа надо было снести БД - снес и восстановил.

2 января 2021 г.
----------------
Прошел три главы: 11-ю - создание приложения для публикации комментов (интересно реализацией внешних ключей); 12-ю - о загрузке на сайт файлов (в т.ч. изображений) через админку; 13-ю - введение разграничений прав пользователей (здесь все вроде бы получилось - сайт работает как надо - но тесты (2 из 4 по данному приложению) не проходят(запуска код автора, то же самое)).

3 января 2021 г.
----------------
Просмотрел три последних занятия (из четвертой части) базового курса по python от OTUS (вел Сурен). Речь шла о CI/CD на основе Gitlab (особо не вникал). Зарегистрировался в почтовом сервисе Mailgun (mailgun.com) - можно будет его использовать после деплоя (т.к. для работы сервиса требуется указать домен).

4 января 2021 г.
----------------
Изучил еще две главы: 14-ю - она посвящена подключению платежной системы Stripe (поначалу подключиться не удавалось - вываливался аллерт о том, что API ключ is invalid. Потому вдруг сервис подключился, почему именно, точно не ясно); 15-ю - о добавлении функции поиска по сайту. Да. Впервые за последние несколько месяцев достал гг - думаю, продолжу освоение ирландщины.


5 января 2021 г.
----------------
Освоил главу 16, посвященную проблемам производительности приложения и отладке с помощью debug_toolbar, а также кешированию и применению индексов к БД. Поставил струны на гитару и заказал в Перми комбик fender frontman 25r.

6 января 2021 г.
----------------
Справился с главой 17, основной проблемой стало то, что вдруг поерестала открываться страница сайта при перезапусках двух версий приложения (соответственно, на основе docker-compose.yml и docker-compose-prod.yml) - долго не мог понять причину, оказалось дело в схеме http:// https:// - когда запускал контейнер на основе https (здесь страница, разумеется, не открывалась), последующий запуск контейнера на основе http не приводил к автоматической смене схемы (т.е. я пытался открыть http по схеме https - в логах об этом было ясно сказано: "You're accessing the development server over HTTPS, but it only supports HTTP", но все равно не мог понять, что имеется в виду). В итоге разобрался и в docker-compose.yml заменил внешний порт на 8008, поскольку порт в строке виден всегда, в отличие от варианта схемы.
Начал главу 18, где речь идет о развертывании сайта на удаленном сервере (здесь, как и в книге для beginners, используется Heroku). Из виндовской убунты достучаться до heroku не получилось (и вряд ли это возможно, да и зачем), поэтому буду развертывать в оболочке командной строки хостовой машины (т.е. в cmd; уже копирнул код из  /home в /mnt/d/...).

7 января 2021 г.
----------------
Произвел деплой проекта на сервер Heroku (и не один раз). Чувства смешанные: во-первых, как оказалось, данные из локальной БД в БД на сервере автоматически не переносятся (но вроде бы, их можно копировать, правда пока непонятно как); во-вторых, есть проблемы с картинками - их не удается ни залить через админку, ни взять из media/covers (где лежат обложки книг); в-третьих, не срабатывает уровень доступа по условию оплаты (конкретно: доступ к книжкам открывается, а зеленая кнопка 'Purchase All Books' не исчезает, так что книжки можно прикупить еще не раз))). Буду разбираться, тем более, что последняя проблема есть и на локальной версии сайта - там не проходят тесты и исчезновение кнопки срабатывает с опозданием (но срабатывает). 
Да, еще не отправляется почтовое сообщение при регистрации нового посетителя (выдает 500-ю ошибку). Сейчас почта рассылается через gmail; надо будет подключить mailgun и там уже смотреть.

8 января 2021 г.
----------------
Начал конспектировать Django for Professionals (сделал 1-3 главы). Пробежал книжку по DRF, но не Винсента, а другую (скачал ее из группы VK); она на русском и написана доходчиво - буду осваивать параллельно с книгой Винсента.

9 января 2021 г.
----------------
Законспектировал главы с 4 по 10. В сжатом виде все намного нагляднее.

10 января 2021 г.
-----------------
Завершил конспектирование книги. Вступил в группу VK "Django_Python" для интересующихся Django (как я понял, основатель и драйвер проекта Алексей Голобурдин, посмотрел несколько его видео - проникся и задонатил за 3 переводные книги); подписался на канал "Диджитализируй!" (платформа boosty.to). Решил попрактироваться в работе с БД (причем именно через терминал), для чего установил на WSL софт Postgres и завел в репо it_notes файл для записей по СУБД (dbms_notes).

11 января 2021 г.
-----------------
Мучился с установкой Postgresql (подробнее в dbms_notes, проблемы все таки решил); случайно снес каталог run, в котором среди прочего содержатся сокет-файлы docker. 
В процессе лечения снес Docker Desktop (думал, что при его переустановки автоматом создадутся нужные файлы в wsl, но нет). В итоге переустановил саму wsl (надо было просто снять ту самую галочку Linux подсистема Windows). 
После переустановки оказалось, что нужный каталог вместе с файлами появился, а пользовательские данные остались - т.е. система восстановилась (и это радует - отделался малой кровью).
Начал просматривать русский перевод Django for begginers (интересные места собираюсь законспектировать).

12 января 2021 г.
-----------------
Создал два приложения (каждое в две страницы - одна выводит список котов, а другая - страница для каждого кота) в порядке тренировки (модель Cat). Первое приложение основано на контроллерах-классах (сложностей не вызвало, только лишь были некоторые трудности с шаблонами). Второе использует контроллеры-функции (а вот это было весьма тяжело, но теперь есть понимание, что такое Cat.objects.all() и Cat.objects.get(id=pk) плюс куда и какие параметры передавать: catslist(request) и catdetail(request, pk)).

13 января 2021 г.
-----------------
Посмотрел примерно половину курса от WebforMyself "Инструменты Front-end разработчика" - речь шла об особенностях установки и использования Notepad++, SublimeText3, Git, Chrome Devtools (наконец-то, явно осознал, зачем нужны ветки для тех, кто разрабоатывает один - для внедрения кода в эксплуацтацию и параллельной разработки дополнительного функционала).

14 января 2021 г.
-----------------
Завел еще один репо на github (github.com/karyshevm) и решал проблему переключения доступа к двум репо по ssh-ключам на одной машине без всяких перелогиниваний. В инете окончательного решения не нашел (но нашел промежуточное, которое вообще позволяет как-то переключаться), и в итоге создал два конфиг-файла (для каждого репо). Теперь через алиасы, прописанные в .bashrc, копирую нужный вариант в файл .ssh/config и все работает (загадка момента в том, что каждый из файлов содержит оба ключа, а так же тот аккаунт, к которому НЕ НАДО присоединяться!!!). 

15 января 2021 г.
-----------------
Занимался прояснением того, как следует начинать разработку проекта. Основная проблема - для варианта создания виртуальной среды (при помощи pipenv) pycharm не всегда может создать или найти соответствующий базис (папку). Думаю, это решается не в лоб, а с помощью Dockerа. Так, выяснилось, что если IDE даже и не может активировать виртуальную среду (да, именно это и есть главная проблема в pycharm) и из нее уже открыть приложение (например, запустить сервер django), то запуск на основе Dockerfile позволяет это сделать (а если подключить к этому дело docker-compose, то вопрос решается). Надо формализовать данный процесс.

16 января 2021 г.
-----------------
Решил вопрос об ssh-подключении к нескольским репо на одном компе в wsl: создал для каждого из подключений к конкретному репо свой конфигурационный файл и написал bash-скрипт, который этими переключениями управляет (сначала распознается владелец репо, потом в официальный конфиг копируется нужный вариант конфига, после чего выполняется команда git push). Повесил этот скрипт не только на push, но и fetch с pull-ом.
На канале Диджитализируй! узнал о такой классной штуке, как Tmux, и приступил к его изучению (сейчас набираю этот текст в tmux-сессии).

17 января 2021 г.
-----------------
Приступил к изучению Tmux (создал здесь файл с описанием команд, настроек и т.д.). Параллельно скачал материалы по работе с облачными провайдерами (AWS, Asure, Gitlab) - почитаю-посмотрю для создания общего представления о предмете.

18 января 2021 г.
-----------------
Закончил ознакомление с книгой о tmux. Поставил программу (по умолчанию ее не было) и гитхабовский конфиг на dell. Большинство проблем с  настройками удалось решить (например, копирование). Постараюсь использовать "Терминальный мультиплексор" как базисный инструмент для работы в командной стрoке (да, проблемы все же есть, команды vim работают несколько иначе - например, шагание по страницам комбинацией Shift+стрелки вверх-вниз здесь не поддерживается).

19 января 2021 г.
-----------------
Посмотрел вебинар (№ 3) по облачным сервисам GibLab, AWS и Azure. Начал читать книгу "Чистый код" Роберта Мартина. 

20 января 2021 г.
-----------------
Просмотрел вебинары №№ 4 и 5, а также половину 6-го)) (другой преподаватель и другой стиль ведения - 2,5 - 3 часа эфира - нагоняет тоску). Книга "Чистый код" будет интересна, в первую очередь, java-программистам - примеры в ней приведены именно на этом языке (или на C++). Главное помнить, что чистый код - это тщательно проработанный код, который хорошо читаем и обладает четкой структурой и понятной  логикой (возможно, вернусь к книге потом. Да, там говорится по некое правило Леблана - потом, значит никогда - на, да увидим...). Начал пересматривать курс по django от WebForMyself - информация воспринимается по-новому, многое понятнее и потому интереснее.

21 января 2021 г. 
-----------------
Начал читать книгу Антонио Меле "Django 2 в примерах" (русский перевод, 2019). Интересно, более сжато по сравнению с Дроновым. Продолжаю смотреть курс от WebForMyself (часть 1, 11 из 55). 

22 января 2021 г.
-----------------
Целый день потратил на то, чтобы сделать шаблон проекта на основе докера и без использования пакетов создания виртуальной среды (например, pipenv), посколь они, по сути, дублируют друг друга и привносят некоторую избыточность.
Сначала получалось - создал докер (в нем явно прописал pip install django && pip install psypg2-binary) и докер-композ файлы, на их основе запустил приложение. Но когда дошло дело до создания кастомной модели пользователя, докер начал барахлить.
В итоге прихожу к выводу, что pipenv нужен как запасной парашют на тот случай, когда что-то не запускается в докер-контейнере (и все равно есть какая-то неясность, которую я пока не могу сформилровать).

23 января 2021 г.
-----------------
Посмотрел два курса по Docker (оба на русском): от компании Слёрм и от платформы Udemy. 
Первый курс широкоаспектен (CI/CD на GitLab; сети; управление памятью и процессорным временем, которые выделяются контейнерам) и содержит множество команд (пару из них занес в алиасы), которые здесь же используются в командной строке при демонстрации примеров.
Второй курс спеацилированный (в нем рассказывается о Docker Swamp); подача материала обстоятельная, но управление кластерами нод, на которых запущены докер-контейнеры, для меня пока практического интереса не представляют (поэтому этот курс досмотрел до половины; вернусь к нему, когда возникнет потребность).
Приступаю к 3-ей главе книги "Django 2 в примерах" (речь в этой и предыдущих главах идет о создании такого веб-приложения, как блог).




