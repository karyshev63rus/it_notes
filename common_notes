Notes
=====

26 декабря 2020 г.
------------------
Продолжается изучение PostgreSQL. Требования к СУБД в плане проведения транзакций (ACID) - атомарность, согласованность, изолированность, долговечность (надежность).
Начинается ознакомление с "Приложением 12 факторов" - требованиями к разработке и развертыванию современого программного софта в виде веб-приложений:
I. Кодовая база: одна кодовая база, отслеживаемая системой контроля версий, и множество развертываний; 
II. Зависимости: явно объявляйте и изолируйте зависимости;
III. Конфигурация: сохраняйте конфигурацию в среде выполнения;
IV. Сторонние службы: считайте сторонные службы подключаемыми ресурсами;
V. Сборка, релиз, выполнение: строго разграничивайте сборку и выполнение;
VI. Процессы: запускайте приложение как один или несколько процессов не сохраняющих внутреннее состояние;

27 декабря 2020 г.
------------------
Еще три фактора 12-факторного приложения:
VII. Привязка портов: экспортируйте сервисы через привязку портов;
VIII. Параллелизм: масштабируйте приложение с помощью процессов;
XI. Утилизируемость: максимизируйте надежность с помощью быстрого запуска и корректного завершения работы;
Масштабируемость - способность системы, сети или процесса реагировать на изменение рабочей нагрузки; регулировать степень использования ресурсов (запускать новые или останавливать работающие процессы) в зависимости от поступления новых задач;
Запустил на linux приложение на основе  Dockerfile и docker-compose; на винде установил подсистему Ubuntu20.04 и также запустил приложение, собрав образ из докер-файла. Пробросил порты и открыл в браузере на хост-машине.

28 декабря 2020 г.
------------------
Последние три фактора из Приложения 12-ти факторов:
X. Паритет разработки/работы приложения: держите окружение разработки, промежуточного развертывания и рабочего развертывания максимально похожими;
XI. Журналирование: рассматривайте журнал как поток событий;
XII. Задачи администрирования: выполняйте задачи администрирования/управления с помощью разовых процессов
Пытался запустить контейнер с приложением (отключенным от SQLite3) совместно с контейнером на основе Postgresql путем сборки на основе файла docker-compose.yml - не получилось. Но получилось просто запустить приложение с подключением его к PG (для чего специально создал postgres-базу данных).
UPD. Запустить удалось, прописав в docker-compose файле две строки (под строкой image: postgresql:12 и с тем же отступом - нашел их в репо книги на гитхабе):
    enviroment:
    - "POSTGRES_HOST_AUTH_METHOD=trust"

29 декабря 2020 г.
------------------
Продолжаю изучать книгу Django for professionals. Освоил 3-ю главу, где создается кастомная модель пользователя (правда, пока непонятно, зачем она нужна): пока это привело только к изменению внешнего вида административной страницы сайта. Пробовал поставить chrome на ubuntu-подсистему винды; не удалось, но зато выяснил, как решать проблемы с недопоставившимися пакетами (см. в  файле linux_notes).

30 декабря 2020 г.
------------------
Освоил 4-ю и 5-ю главы книги (посвящены шаблонам, тестированию, входу-выходу и регистрации). Удобно работать с запушенным в фоне docker-compose: командой docker-compose exec web python manage.py tests users можно запускать тесты  конкретно приложения test без остановки запущенных контейнеров.
О проблеме подключения контейнера с  django к базе данных postgres на локальном сервере (тот, что запускается с pgAdmin4): подключить удается только тот контейнер, что создан в "правильной" виндовской среде (через cmd-консоль); контейнер, созданный в линуксовском окружении, не подлючается (через команду ps aux даже не  выявляются процессы с названием, включающим 'postgres').


