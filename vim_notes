hjkl - перемещение курсора по направлениям движения < V ^ > 
:q - выход
:wq - выход с записью изменений
:q! - выход без записи изменений
x - удаление символа под курсором 
i - вход в режим редактирования (вставка текста в обычном режиме)
a - вход в режим вставки (вставка текста после символа, находящегося 
под курсором. Заглавная А позволяет добавить в конец строки)
R работает как клавиша Insert
Esc - выход из режима редактирования
операции удаления осуществляются с помощью клавиши d 
(при этом при однократном нажатии d удаленная строка или подстрока помещается в буфер обмена, а при двукратном - в буфере ничего не сохранится)
dw - удаление текста до конца слова (удобно из-за расположения клавиш)
d$ - удаление текста до конца строки (не так удобно, но все же - Ctrl+4)
d^ - удаление тeкста до начала строки (Ctrl+6)
dd - удаление строки полностью
2dd - удаление двух строк (в общем случае, n строк)
2w - перемещение к началу второго слова
3e - перемещение к концу третьего слова
0 - перемещение к началу строки
u - отмена результата работы предыдущей команды
U - отмена исправлений во всей строке
Ctrl+R - откат отката
p - вставка последнего удаленного текста после курсора
r - поставить курсор на заменяемую литеру, нажать r и ввести правильную литеру
c$ - поставить курсор на позиции начала замены и нажать c$, вводить текст
Ctrl+g - определить, на какой строке файла находится курсор
Shift-g (т.е. G) - по умолчанию переносит к концу файла, но можно ввести 
номер строки и снова ввести G - будет осуществлен переход на введунную строку
/ - открываем строку поиска и вводим искомое слово, ищем в прямом направлении
для продолжения поиска слова нажимаем на n (для поиска в обратном направлении 
- к началу документа) вводим N
? - открываем строку поиска и вводим искомое слово, ищем в обратно направлении
% - поиск парных скобок (ставим курсор на скобку, вводим % и курсор 
оказывается на позиции, в которой расположена парная скобка)
:s/было/стало/g - замена одного другим
:#,#s/было/стало/g - замена одного другим между двумя строками (номера # и #)
:% s/было/стало/g - замена одного другим во всем файле
:! ... - введение внешней команды, например, :!ls выполнит команду ls

запись части файла в отдельный файл
ставим курсор на начало фрагмента
нажимаем v и перемещаем курсор (текст при этом подсвечивется) 
вводим ':' (внизу появляется :'<,'>)
вводим w и имя нового файла, куда будет сохоранен фрагмент, далее enter
:r Test - вставка содержимого файла Test в текущий файл
o - вставка строки ниже текущей и переход в режим редактирования
О - то же, но строка вставляется выше текущей

скопировать - курсор на начало фрагмента, далее выделяем его через v,
копируем клавишей y и вставляем в нужное место клавишей p
yw - копируем одно слово

при поиске игнорировать регистр можно командной :set ic
включить подсветку искомых слов :set hl is ('hlsearch' и 'incsearch')
отключение, соответственно, командами set noic и nohlsearch



vifm - двухпанельный файловый менеджер, создан на основе vi и vim, работает в терминале, исходный вид - это два вертикально разделенных окна
----
адрес сайта - https://vifm.info
man vifm - разумеется, справка
Tab или Space (пробел) - переход между окнами
v - включение режима VISUAL, позволяет выделять файлы и папки
only - работа в одном окне
split - двухоконный режим работы 
ctrl-w + s - разделение окон горизонтально 
ctrl-w + v - разделение окон вертикально
перемещение осуществлется традиционными клавишами vim: h,j,k.l
j - курсор вниз, k - курсор вверх, h - перемещение в родительский каталог, l - вход в каталог (рабоатет как аналог Enter)
работает автозавершение при помощи команды Tab
для ввода команд (т.е. перехода в режим командной строки) используем тот же вариант, что и в vim - предварительно вводим двоеточие ":"
возвращение из режима командной строки через клавишу Esc
u - отмена команды
ctrl-r - возвращение отмененного действия
:q - выход из редактора в командную строку
:view - вывод в одном окне содержимого (первых строк) файла, на котором строит курсор в другом окне (выход из режима той же командой :view)
crtl-y (Y) или yy - копирование файла или группы файлов (их следует предварительно выделить)
p - вставка скопированного файла в нужную папку или же ctrl-p (P) - перемещение выделенного файла в нужную папку
dd - удаление файла или группы файлов, далее по запросу системы вводим Y или N (он будет перемещен в корзину, вывести его оттуда можно клавишей p)
DD - удаление файла или группы файлов минуя корзину
:trashes - файл удаляется в корзину, и найти ее можно вышеприведенной командой
:lstrash - посмотреть содержимое корзины
:empty - очистить корзину (удалить  находящиеся в ней файлы безвозвратно)
:restore - восстановить файл из корзины (сначала надо зайти в корзину и поставить курсос на нужный файл), но можно и просто клавишей r
linux - переход в корзину, возможно, такой :cd /home/username/.local/share/vifm/Trash 
windows - папка корзины .vim-Trash создается в корне того диска, на котором установлен vifm
:registers или :reg - просмотр, какие файлы содержатся в каких регистрах, куда они попали при копированнии командой "rY (имена регистров от "a до "z)
:rename - команда для переименования файлов
:cw - переименовывает файл и его расширение
:cW - переименовывает файл без расширения
:set - команда используется для установки параметров (при таком вводе выведет параметры, значения которых отличаются от значений по умолчанию)
изменение параметра просмотра истории команд :set history (посмотреть значение параметра), :set history=50 (установить новое значение), :set history += 20 - увеличить значение на 20, :set history& - сбросить значения к значению по умолчанию
:set dotfiles - показывать скрытые файлы (т.е. начинающиеся с точки)
дотфайлы также реагируют на: zo - включить показ, zm - выключить показ, za - инвертировать
:set nodotfiles - соответственно, отключить эту команду (подход :set no... работает универсально)
:set parname! - инвертирование параметра
сохранение параметров на будущее (введенные значения через строку сохраняются в течение одной сессии) делается в файле конфигурации vifmrc
:echo $VIFM - показывает путь до папки конфигурации (есть локальная и глобальная конфигурационные папки и файлы)
:write - сохранине изменений в конфигурации
:restart - перезапуск vifm
:sort - сортировка файлов (:set sort==mtime+name - самостоятельная настройка аргумента сортировки, например, :set sort+=dir - будут отображены сначала папки, потом файлы)
:invert o - инвертировать порядок сортировки
:lsview - так называемый "краткий" режим отображения файлов - просто список в несколько рядов (поднастройка :set lsoptions=transposed)
:set nolsview - соответственно, сбор вышеуказанного параметра
:set millerview - способ отображения в виде каскадных списков (предложил Марк Миллер в 1980 г.): в левом столбце содержимое родителькой папки, в средней - текущей папки, а в правом - папки под курсором (если курсор на файле - столбец пропадает)
:tree - древовидное отображение папки (режим отключается при выборе какой-либо папки или файла клавишей Enter)
поиск вперед и назад клавишами / и ? (далее n и N), можно использовать регулярки (например, ищем файлы zip шаблоном zip$)
:set incsearch - будут искаться нужные файлы, сужая поиск по мере того, как продолжается ввод
:nohlsearch или :noh - очистить результаты поиска (убрать выделение найденных выражений)
:substitute или :s - замена одной подстроки другой подстрокой в именах файлов
:s/\.bak$/.tmp/i - замена расширения .bak на .tmp во всех файлах в текущей папке (не затрагивая вложенные папки)
=zip - еще один вариант по иска, при котором вместо выделения файлов из списка пропадут файлы, не удовлетворяющие выделенному критерию
символы, переключающие vifm: / и ? - в режим поиска, : - в режим ввода команд, = - в режим фильтра 
:filter - команда для фильтрации (например, команда :filer \.bak$ скроет все файлы, оканчивающиеся на ".bak")
:filter! - команда выведет инвертированные результаты, которые бы дала команда :filter 
:!программа параметры - так осуществляется запуск программ (например, :!ls /usr/bin > ls.txt или :!python script.py)
:!!программа параметры - результат действия программы не скроется сразу, а будет ждать для закрытия нажатия клавиши Enter
:!команда %c - выполнит команду для файла, на котором стоит курсор (например, :!python %c при этом курсор стоит на файле script.py)
:!команда %с & - выполнит команду в фоновом режиме (т.е. во время ее исполнения сам vifm так же будет доступен)
:jobs - выводит список запущенных фоновых процессов (вроде бы процесс здесь можно убить командой dd, но что-то не выходит)
:shell или :sh - временно скрывает vifm и открывает полноценную консоль. Вернуться можно комбинацией клавиш ctrl-d
Для переключения между небольшим набором постоянно используемых папок пригодятся команды marks и bmarks
m<имя_метки> - установка новой метки (например, наводим курсор на нужный файл или папку и нажимаем ma, если имя занято - оно будет перезаписано)
:marks - выведет список существующих меток папок, где можно выбрать метку и перейти в нужную папку; хороши как хранилище временных ссылок
'<имя_метки> - быстрый переход по метке (например, вводим'd)
:bmarks - выводит список меток, которые хороши для долговременного хранения ссылок на папки, куда нужно периодически возвращаться
:bmark <тег или теги> - создает нужную закладку для папки (например, :bmark doc work пометит текущею папку этими тегами)
:map _ команда для установки горячих клавиш, принимает два аргумента: новую горячую клавишу и последовательность, которую будет имитировать эта клавиша
:map <f3> :!gvim -R %f &<cr> - вешает на клавишу F3 открытие документа в редакторе gedit для просмотра (т.е. в режите "только для чтения")
:nmap - покажет клавиши команд, которые работают в нормальном режиме
:cmap - в командном режиме
:gmap - в режиме просмотра
:vmap - в визуальном режиме
:set vifminfo - выведет значение параметра vifminfo и покажет, история каких данных записывается в файл vifmrc (его можно прописать в этом файле, например: vifminfo=bookmarks,bmarks,tui,savedirs,dhistory...)
vifminfo - менеджер самостоятельно создает файл с историей данных
:colo - узнать, какой набор цветовых схем есть в редакторе
:colo? - узнать название текущей цветовой схемы
Ссылка на адрес репо автора блога, откуда это было взято: https://github.com/Jenyay/vifmrc

