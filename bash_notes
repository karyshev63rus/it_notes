Здесь будет, по сути, продолжение той информации, что уже не умещается в файле linux_notes (не умещается в том смысле, что файл  разросся и искать в нем нужную инфу становится проблематично). Основу этого файла (по крайней мере, его начала) будет составлять конспект книги Игоря Шпигоря "Программирование на Bash с нуля".

find <base_dir for search> -name <file or calalog name> -type d - ищем каталог по имени (если ищем файл, то флаг будет -f) 
возможен и такой вариант: find <base_dir for search>  -type d -name <file or calalog name>

find . -type f -path */objects/* -exec echo {} \; - выводит все файлы из текущего каталога (рекурсивно), путях которых есть участок /objects/

find / -path */doc/* -name README > result_and_errors.txt 2>&r" < "abc") || -z "$var" ]] && echo "Строка не пустая и меньше \
чем abc или строка пустая"1 - потоки stdout и stderr перенаправляются в указанный файл (вроде бы, на первый взгляд, должно быть что-то вроде 2>&r" < "abc") || -z "$var" ]] && echo "Строка не пустая и меньше \
чем abc или строка пустая"1 > result_and_errors.txt - но это не так, верна первая конструкция: сначала поток вывода связывается с файлом, а потом поток ошибок перенаправляется в это файл)

find / -path */doc/* -name README > result.txt 2> errors.txt - для направления потока вывода и потока ошибок в разные файлы операторы перенаправления указываются друг за другом

эти команды можно использовать в одном конвейере
find . -type f | grep "bash" - здесь на вход в grep подаются имена файлов (будут выведены файлы, содержащие в названии подстроку 'bash')
find . -type f | xargs grep "bash" - а здесь не имена файлов, а их содержимое (будут выведены строки из файлов (с указанием пути к этим файлам), содержащих подстроку 'bash', например: './linux_notes:#! /bin/bash - обязательно первая строка выполняемого файла'). Для этого утилите grep на поток ввода передается не текст, а имена файлов через параметры командной строки

Утилиты конвертации файлов в текстовый формат
pdftotext - pdf-файл в текстовый формат
pdfgrep - ищет pdf-файл по его содержимому
antiword - конвертирует файл ms office в текстовый формат
catdoc - то же
xdoc2txt - конвертирует файлы pdf и ms office в текстовый формат

man <command name> - традиционный способ вызовы инфы о команде
<command name> --help - вызываем справку
info <command name> - то же

du /usr/share -a -h | tee result.txt - данные об использовании дискового пространства (du) будет (tee) как записано в файл, так и выведено на экран (есть флаг -d, который устанавливает уровень рекурсии и  равен n; например, обход по каталогу без входа в подкаталоги будет иметь значение 1: -d 1)

du /usr/share -a -h | grep "\.html" | sort -h -r - можно еще и сортировать (флаг -r - от z до a, а флаг -h - который во втором случае - что означает, не знаю)

в итоге может получиться такой вот крокодил:
du /usr/share -a -h | tee du.txt | grep "\.html" | tee grep.txt | sort -h -r > result.txt

применение "|" и ";" приведет к разным результатам (параметр "-" утилиты grep добавляет данные со стандартного потока ввода в конец команды)
ls /usr/share/doc/bash | grep "README" * -
ls /usr/share/doc/bash ; grep "README" * -
в первом случае будет прочитано содержимое одного из файлов, где есть такая подстрока, а во втором сначала будет выведен список файлов, а уже потом содержимое указанного файла


find . -name "*.txt" -exec cp -t /tmp/notes {} \; - предлагается использовать команду exec, так как ls может неправильно прочитать имена файлов (в этом выражении осуществляется копирование файлов с расширением .txt из текущего каталога в каталог /tmp/notes, который надо предварительно создать)

cp -R ~/docs ~/docs-backup && echo "OK" > result.log || echo "Error" > result.log - реализация ветвления с применением логических И (&&) и ИЛИ (||) на примере копирования директорий: если все удается, то в файл пишется строка OK, если нет - Error

A && B || C - общее представление механизма ветвления (выражение читается слева направо, т.е. операторы левоассоциативны)

В книге рассматривается пример создания скрипта: данные из одного каталога архивируются и копируются в другой каталог. В итоге был получен такой скрипт:
----
#!/bin/bash

bsdtar -cjf "$1".tar.bz2 "$@" &&
  echo "bsdtar - OK" > results.txt ||
  { echo "bsdtar - FAILS" > results.txt ; exit 1 ; }

mv -f "$1".tar.bz2 /d &&
  echo "cp - OK" >> results.txt ||
  ! echo "cp - FAILS" >> results.txt
----

каталог /usr/local/bin - размещенный здесь файл с bash-скриптом можно будет  запустить из любой точки файловой системы (по сути, скрипт приобретает статус утилиты - для большего подобия стоит убрать расширение .sh)

Утверждается, но на практике подтвердить не удалось:
$@ - интерпретирует аргументы командной строки как набор слов, т.е. переданная строка "раз два три" будет прочитана как "раз" "два" "три"
$* - то же, но будет прочитана как одно слово, т.е. "раз два три" на вход -> "раз два три" на выход

Тестировал на скрипте:

#!/usr/bin/bash
echo "$@"
for i in "$@"; do echo $i; done
for i in $@; do echo $i; done
echo ----------
echo "$*"
for i in "$*"; do echo $i; done
for i in $*; do echo $i; done
echo ----------
for i in one two three; do echo $i; done

stdout:

ne two three
one two three
one
two
three
----------
one two three
one two three
one
two
three
----------
one
two
three

Задание значения переменной по умолчанию при подстановке
--------------------------------------------------------
cp "${directory:-~}" - если значение не задано, копирование будет произведено в домашнмй каталог

${parameter:-word} - если переменная parameter не объявлена или имеет пустое значение, подставится слово word

${parameter:=word} - то же условие, но сначала будет присвоено значение по умолчанию, а потом переменная будет подставлена (т.е. в отличие от первого случая, переменная будет не просто замещена словом word, а само слово word будет записано в переменную parameter)

${parameter:?word} - то же условие, но значение по умолчанию будет выведено в стандартный поток ошибок, после чего исполнение скрипта будет завершено с кодом возврата, отличным от 0

${parameter:+word} - то же условие, но подстановки не будет

Чтобы запустить дочерний процесс, надо вызвать новый экземпляр интерпретатора в окне терминала:
bash -c "<command, object and options>" - флаг -c означает, что команда будет передана на исполнение дочернему процессу Bash, например: filename="README.md"; bash c- 'echo "$filename"' (причем используются именно одинарные кавычки, отключающие все подстановки для строки в них - т.е. эта команда на экран ничего не выведет; если же кавычки будут двойными, будет выведено README.md)

Переменные оболочки - локальные переменные и переменные окружения, доступные для данного экземпляра интерпретатора (список этих переменных можно вызвать утилитой set без параметров, в vim это составляет более 5000 строк!)

Специальные параметры (у $* и $@ параметры начинаются не с нулевого - $0, a c первого - $1)
---------------------
$* - содержит все позиционные аргументы, переданные в скрипт. Без двойных кавычек каждый позиционный параметр подставляется как отдельное слово; с двойными - Bash подставляет одно слово, содержащее все параметры.
$@ - массив со всем позиционными параметрами, переданными в скрипт. без двойных кавычек Bash обрабатывает каждый элемент массива как строку без кавычек (исполняется word spliting). С двойными кавычками - обрабатывает каждый элемент массива как строку с кавычками (word spliting не происходит). 
$# - число позиционных параметров, переданных в скрипт
$1, $2, ... - содержит значение соответствующего позиционного параметра: $1 соответствует первому параметру, $2 - второму и т.д. Номера указываются в десятичной системе
$? - код возврата последней выполненной команды в активном режиме (fg). Если команды выполнялись в конвейере, параметр хранит код возврата последней из них
$- - содержит опции текущего экземпляра интерпретатора 
$$ - идентификатор процесса текущего экземпляра интерпретатора. При подстановке в subshell возвращает PID родительского процесса
$! - идентификатор процесса PID последней команды, запущенной в фоновом режиме
$0 - имя текущего командного интерпретатора или выполняемого в данный момент скрипта

export BROWSER_PATH='/opt/firefox/bin' - объявление переменной окружения

переменную можно сначала объявить, а потом поместить в глобальную  область видимости:
BROWSER_PATH='/opt/firefox/bin'
export BROWSER_PATH

env или export без параметров - просмотр объявленных переменных окружения
set без параметров - просмотр переменных оболочки 

declare -i number=42 - объявление переменной

declare -p PATH - флаг -p добавит в вывод атрибуты переменной

declate -f - флаг -f вызовет вывод информации только о функциях (можно после флага указать имя конкретной функции) 

команда declare также устанавливает атрибуты при объявлении новой переменной:
declare -i sum=11+2
text=11+2
в первом случае результатом будет число 13, во втором - строка '11+2'

Опции команды declare и соответствующие атрибуты переменных
---------------------
-a - объявленнная переменная является индексируемым массивом. Элементы этого массива доступны по целочисленным номерам
-A - то же, но ассоциативным массивом. Каждому элементу такого массива соответствует ключ-строка
-g - объявление переменной в глобальной области видимости скрипта. При этом переменная не попадает в окружение
-i - объявление целочисленной переменной. Присваиваемое ей значение обрабатывается как арифметическое выражение
-r - объявление константы. После объявления ей нельзя присвоить другое значение
-x - объявление переменной окружения
unset <имя переменной> - удаление переменной любого типа, кроме константы

Создание массива - из-за нуль-терминатора (символа, означающего в POSIX конец файла, а в Bash - конец строки) нет надежного способа разделить строку на подстроки нужным нам способом. Поэтому наряду со скалярными переменными в Bash были введены массивы. 

Создание индексируемого массива:
files=$(ls Documents/*.txt) - неправильно
declare -a $(Documents/*.txt) - правильно
однако Bash зачастую сам способен определить тип переменной, поэтому использование declare необязательно

echo "${files[@]}" - будут выведены все элементы массива
echo "${!files[@]}" - тоже, но уже индексы элементов массива
echo "{$filrs[@]:1:2}" - получение среза массива из двух элементов - с  индексами 1 и 2
readarray -t names_array < names.txt - создание массива из файла командой readarray

cp "${files[0]}" ~/Documents - копируем первый элемент из массива files в каталог Documents
cp "${files[@]}" ~/Documents - то же, но копируем все элементы
echo "${#files[@]}" - получение размера массива через символ #
unset 'files[3]' - удаление элемента массива с индексом 3
unset files - удаление всего массива

Создание ассоциативного массива (создается только таким образом):
declare -A contacts=(["Alice"]="alice@gmail.com" ["Bob"]="(697) 955-5984" ["Eve"]="(245) 317-0117"\ ["Mallory"]="mallory@hotmail.com")

Элементы массива можно задать по отдельности:
declare -A contacts
contacts["Alice"]="alice@gmail.com"
contacts["Bob"]="(697) 955-5984"
contacts["Eve"]="(245) 317-0117"
contacts["Mallory"]="mallory@hotmail.com"

Получение значений по ключам ассоциативного массива:
echo "${contacts["Bob"]}"
(697) 955-5984
echo "${contacts[@]}"
(697) 955-5984 mallory@hotmail.com alice@gmail.com (245) 317-0117

Получение списка всех ключей:
echo "${!contacts[@]}"
Bob Mallory Alice Eve

Получение размера массива:
echo "${#contacts[@]}"
4

Если поместить такой массив в скрипт, то по ключу - имени человека - можно получать соответствующие значения
----
#!/bin/bash

declare -A contacts=(
["Alice"]="alice@gmail.com"
["Bob"]="(697) 955-5984"
["Eve"]="(245) 317-0117"
["Mallory"]="mallory@hotmail.com")

echo "${contacts["$1"]}"
----

unset contacts - удаление всего массива
unset 'contacts[Bob]' - удаление элемента массива

Условные операторы (ветвление)
------------------
if УСЛОВИЕ
then
  ДЕЙСТВИЕ
fi

if УСЛОВИЕ; then ДЕЙСТВИЕ; fi

пример побайтового сравнения двух файлов с помощью утилиты cmp (в случае успеха код возврата будет 0):
if cmp file1.txt file2.txt &> /dev/null
then
  echo "Файлы file1.txt и file2.txt идентичны"
fi

if УСЛОВИЕ
then
  ДЕЙСТВИЕ 1
else
  ДЕЙСТВИЕ 2
fi

if УСЛОВИЕ; then ДЕЙСТВИЕ 1; else ДЕЙСТВИЕ 2; fi

if cmp file1.txt file2.txt &> /dev/null
then
  echo "Файлы file1.txt и file2.txt идентичны"
else
  echo "Файлы file1.txt и file2.txt различаются"
fi

if УСЛОВИЕ 1
then
  ДЕЙСТВИЕ 1
elif УСЛОВИЕ 2
then
  ДЕЙСТВИЕ 2
else
  ДЕЙСТВИЕ 3
fi

if УСЛОВИЕ 1; then ДЕЙСТВИЕ 1; elif УСЛОВИЕ 2; then ДЕЙСТВИЕ 2; else ДЕЙСТВИЕ 3; fi

Применение техники "раннего возврата" (идея в том, чтобы в случае ошибки завершить программу как можно раньше: если неудача, происходит выход из программы с кодом 1):
if ! bsdtar -cjf "$1".tar.bz2 "$@"
then
  echo "bsdtar - FAILS" > results.txt
  exit 1
fi
echo "bsdtar - OK" > results.txt

if ! ДЕЙСТВИЕ_1 # т.е. в результате действия получаем результат, противоположный ожидаемому
then
# обработка ошибки
fi

if ! ДЕЙСТВИЕ_2
then
# обработка ошибки
fi

if ! ДЕЙСТВИЕ_3
then
# обработка ошибки
fi

if ! ДЕЙСТВИЕ_4
then
# обработка ошибки
fi

ДЕЙСТВИЕ_5

Оператор [[ - двойные квадратные скобки являются зарезервированным словом. Это значит, что интерпретатор обрабатывает его самостоятельно

сравниваем две строки:
if [[ "abc" = "abc" ]]
then
echo "Строки равны"
fi

сравниваем значение переменной со строкой:
if [[ "$var" = "abc" ]]
then
echo "Переменная равна строке \"abc\""
fi

сравниваем значения двух переменных:
if [[ "$var" = "$filename" ]]
then
echo "Переменные равны"
fi

Операции сравнения строк в операторе
------------------
[[ "aaa" < "bbb" ]] && echo "Строка aaa меньше строки bbb"
> - строка слева больше строки справа в порядке лексикографической сортировки
= или == - строки равны
!= - строки не равны
-z - строка пустая
-n - строка не пустая
-v - переменная объявлена с любым значением
= или == - поиск в строке слева подстроки по шаблону справа: [[ "$filename"=READ*]] && echo "Имя файла начинается с READ"
!= - проверка, что шаблон справа не встречается в строке слева: [[ "$filename"!=READ* ]] && echo "Имя файла не начинается с READ*"
=~ - поиск в строке слева подстроки по регулярному выражению справа: [[ "$filename"=~^READ* ]] && echo "Имя файла начинается с READ"

Логические операции в операторе [[
-------------------
&& - Логическое И: [[ -n “$var” && “$var” < “abc” ]] && echo “Строка не пустая и меньше чем abc”
|| - Логическое ИЛИ: [[ “abc” < “$var” || -z “$var” ]] && echo “Строка больше чем abс или пустая”
! - Логическое НЕ: [[ ! “abc” < “$var” ]] && echo “Строка не больше чем abc”

выражения в операторе [[ можно группировать с помощью круглых скобок. Например, так:
[[ (-n "$var" && "$var" < "abc") || -z "$var" ]] && echo "Строка не пустая и меньше \
чем abc или строка пустая"

Операции проверки файлов в операторе [[
-----------------
-e	Файл существует: 	[[ -e “$filename” ]] && echo “Файл $filename существует”

-f	Указанный объект является обычным файлом (не каталогом и не файлом устройства):
[[ -f “~/README.txt” ]] && echo “README.txt - это обычный файл”

-d	Указанный объект является каталогом:	[[ -f “/usr/bin” ]] && echo “/usr/bin - это каталог”

-s	Файл не пустой:		[[ -s “$filename” ]] && echo “Файл $filename не пустой”

-r	Файл существует и доступен для чтения пользователю, запустившему скрипт:
[[ -r “$filename” ]] && echo “Файл $filename существует и доступен для чтения”

-w	Файл существует и доступен для записи пользователю, запустившему скрипт:
[[ -w “$filename” ]] && echo “Файл $filename существует и доступен для записи”

-x	Файл существует и доступен для исполнения пользователю, запустившему скрипт:
[[ -x “$filename” ]] && echo “Файл $filename существует и доступен для исполнения”

-N	Файл существует и был модифицирован с момента последнего чтения: 
[[ -N “$filename” ]] && echo “Файл $filename существует и был модифицирован”

-nt	Файл слева от оператора новее, чем файл справа. Либо файл слева существует, а справа - нет:
[[ “$file1” -nt “$file2” ]] && echo “Файл $file1 новее чем $file2”

-ot	Файл слева от оператора старее, чем файл справа. Либо файл справа существует, а слева — нет:
[[ “$file1” -ot “$file2” ]] && echo “Файл $file1 старее чем $file2”

-ef	Слева и справа от оператора указан путь до одного и того же существующего файла. Если ваша система поддерживает
жёсткие ссылки, то ссылки слева и справа от оператора указывают на один и тот же файл:
[[ “$file1” -ef “$file2” ]] && echo “Файлы $file1 и $file2 совпадают”

Операции сравнения целых чисел в операторе [[
------------------
-eq	Число слева равно числу справа:		[[ “$var” -eq 5 ]] && echo “Переменная равна 5”
-ne	Не равно:	[[ “$var” -ne 5 ]] && echo “Переменная не равна 5”
-gt	Больше (>):	[[ “$var” -gt 5 ]] && echo “Переменная больше 5”
-ge	Больше или равно:	[[ “$var” -ge 5 ]] && echo “Переменная больше или равна 5”
-lt	Меньше (<):	[[ “$var” -lt 5 ]] && echo “Переменная меньше 5”
-le	Меньше или равно:	[[ “$var” -le 5 ]] && echo “Переменная меньше или равна 5”

Оператор case применяется в общем случае так:
case СТРОКА in
  ШАБЛОН_1)
    ДЕЙСТВИЕ_1
    ;;

  ШАБЛОН_2)
    ДЕЙСТВИЕ_2
    ;;

  ШАБЛОН_3)
    ДЕЙСТВИЕ_3
    ;;

  ШАБЛОН_4)
    ДЕЙСТВИЕ_4
    ;;
esac

Варианты ветвления на основе if, case и ассоциативного массива
------------------
У скрипта есть три режима работы: архивация со сжатием, архивация без сжатия и разархи-
вация. Нужное действие выбирается с помощью опции скрипта. Один из вариантов опций:
-a - Архивация без сжатия
-c - Архивация со сжатием
-x - Разархивация

Скрипт архивации документа на основе if:
#!/bin/bash
operation="$1"
if [[ "$operation" == "-a" ]]
then
  bsdtar -c -f documents.tar ~/Documents
elif [[ "$operation" == "-c" ]]
then
  bsdtar -c -j -f documents.tar.bz2 ~/Documents
elif [[ "$operation" == "-x" ]]
then
  bsdtar -x -f documents.tar*
else
  echo "Указана недопустимая опция"
  exit 1
fi

Скрипт архивации документа на основе case:
#!/bin/bash
operation="$1"
case "$operation" in
  "-a")
    bsdtar -c -f documents.tar ~/Documents
    ;;
  "-c")
    bsdtar -c -j -f documents.tar.bz2 ~/Documents
    ;;
  "-x")
    bsdtar -x -f documents.tar*
    ;;
  *)
    echo "Указана недопустимая опция"
    exit 1
    ;;
esac

Скрипт-обертка над утилитами bsdtar и tar:
#!/bin/bash
utility="$1"

case "$utility" in
  "-b"|"--bsdtar")
    bsdtar "${@:2}"
    ;;

  "-t"|"--tar")
    tar "${@:2}"
    ;;

  *)
    echo "Указана недопустимая опция"
    exit 1
    ;;
esac

Скрипт архивации на основе ассоциативного массива:
#!/bin/bash
option="$1"

declare -A utils=(
  ["-b"]="bsdtar"
  ["--bsdtar"]="bsdtar"
  ["-t"]="tar"
  ["--tar"]="tar")

if [[ -z "$option" || ! -v utils["$option"] ]]
then
  echo "Указана недопустимая опция"
  exit 1
fi

${utils["$option"]} "${@:2}"


Bash выполняет целочисленную арифметику.
Результат сложения двух целых чисел сохраняем в переменной, которую объявляем с целочисленным атрибутом:
declare -i var=12+7 # результатом будет число 19, а не "12+7"

Математический контекст можно объявить явно с помощью команды let:
let text=5*7 # результатом будет запись в переменную text числа 35

Примеры объявления, передачи значений и расчета с помощью команды let:
let a=1+1 b=5+1 # без кавычек и пробелов (иначе возможен word spliting)
let "a = 1 + 1" "b = 5 + 1" # двойные кавычки дают возможность поставить пробел
let 'a = 1 + 1' 'b = 5 + 1' # то же касается и одинарных кавычек

У команды let есть синоним - оператор ((. Внутри него word spliting не выполняется.
Оператор имеет две формы. 
Первая называется арифметической оценкой и эквивалентна let:
((var1 = 5 + 9))
Эта форма оператора (( возвращает код ноль при успешном выполнении и единицу в случае ошибки.
Вторая форма называется арифметической подстановкой:
var=$((5+9))
В этом случае оператор вернет результат арифметической операции (здесь - 14)

В операторе (( имена переменных можно указывать без знака доллар $. Bash всё равно
правильно подставит их значения. Например, следующие два выражения для вычисления
result эквивалентны:
a=5 b=10
result=$(($a + $b))
result=$((a + b))

В обоих случаях переменная result станет равна 15.
Не используйте знак доллара в операторе ((. Это сделает ваш код чище и понятнее.


Операции с арифметических выражениях
------------------------------------

Вычисления
*	Умножение				echo "$((2 * 9)) = 18"
/	Деление					echo "$((25 / 5)) = 5"
%	Остаток от деления			echo "$((8 % 3)) = 2"
+	Сложение				echo "$((7 + 3)) = 10"
-	Вычитание				echo "$((8 - 5)) = 3"
**	Возведение в степень			echo "$((4**3)) = 64"

Битовые операции
~	Побитовое НЕ (NOT)			echo "$((∼5)) = -6"
<<	Битовый сдвиг влево			echo "$((5 << 1)) = 10"
>>	Битовый сдвиг вправо			echo "$((5 >> 1)) = 2"
&	Побитовое И (AND)			echo "$((5 & 4)) = 4"
|	Побитовое ИЛИ (OR)			echo "$((5 | 2)) = 7"
^	Побитовое исключающее	ИЛИ(XOR)	echo "$((5 ^ 4)) = 1"

Присваивания
=	Обычное присваивание			echo "$((num = 5)) = 5"
*=	Умножение и присваивание 
	результата				echo "$((num *= 2)) = 10"
/=	Деление и присваивание
	результата				echo "$((num /= 2)) = 5"
%=	Остаток от деления и
	присваивание результата			echo "$((num %= 2)) = 1"
+=	Сложение и присваивание
	результата				echo "$((num += 7)) = 8"
-=	Вычитание и присваивание
	результата				echo "$((num -= 3)) = 5"
<<=	Битовый сдвиг влево и
	присваивание результата			echo "$((num <<= 1)) = 10
>>=	Битовый сдвиг вправо и
	присваивание результата			echo "$((num >>= 2)) = 2"
&=	Побитовое И (AND), затем
	присваивание результата			echo "$((num &= 3)) = 2"
^=	Побитовое исключающее ИЛИ
	(XOR), затем присваивание
	результата				echo "$((num^=7)) = 5"
|=	Побитовое ИЛИ (OR), затем
	присваивание результата			echo "$((num |= 7)) = 7"

Сравнения
<	Меньше			((num < 5)) && echo "переменная num меньше 5"
>	Больше			((num > 5)) && echo	"переменная num больше 3"
<=	Меньше или равно	((num <= 20)) && echo "переменная num меньше или равна 20"
>=	Больше или равно	((num >= 15)) && echo "переменная num больше или равна 15"
==	Равно			((num == 3)) && echo "переменная num равна 3"
!=	Не равно		((num != 3)) && echo "переменная num не равна 3"

Логические операции
!	Логическое НЕ (NOT)	(( ! num )) && echo "переменная num имеет значение ЛОЖЬ"
&&	Логическое И (AND)	(( 3 < num && num < 5 )) && echo "переменная num больше 3, но меньше 5"
||	Логическое ИЛИ (OR)	(( num < 3 || 5 < num )) && echo "переменная num меньше 3 или больше 5"

Другие операции
num++	Постфикс-инкремент	echo "$((num++))"
num--	Постфикс-декремент	echo "$((num--))"
++num	Префикс-инкремент	echo "$((++num))"
--num	Префикс-декремент	echo "$((--num))"
+num	Унарный плюс или умножение числа на  1	a=$((+num))"
-num	Унарный минус или умножение числа на -1	a=$((-num))"
УСЛОВИЕ ? ДЕЙСТВИЕ1 : ДЕЙСТВИЕ2	Тернарная условная операция a=$(( b < c ? b : c ))
ДЕЙСТВИЕ1, ДЕЙСТВИЕ2 Список выражений ((a = 4 + 5, b = 16 - 7))
( ДЕЙСТВИЕ1 ) Группирование выражений(подвыражение)	a=$(( (4 + 5) * 2 ))

Порядок выполнения арифметических операций
------------------------------------------
1	( ДЕЙСТВИЕ1 )	Группирование выражений
2	num++, num--	Постфиксный инкремент и декремент
3	++num, --num	Префиксный инкремент и декремент
4	+num, -num		Унарный плюс и минус
5	~, ! Побитовое и логическое отрицание
6	**	Возведение в степень
7	*, /, %	Умножение, деление, нахождение остатка
8	+, -	Сложение и вычитание
9	<<, >>	Битовые сдвиги
10	<, <=, >, >=	Сравнения
11	==, !=	Равенство и неравенство
12	&	Побитовое И
13	^	Побитовое исключающее ИЛИ
14	|	Побитовое ИЛИ
15	&&	Логическое И
16	||	Логическое ИЛИ
17	УСЛОВИЕ ? ДЕЙСТВИЕ1 : ДЕЙСТВИЕ2	Тернарная условная операция
18	=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=		Присваивания
19	ДЕЙСТВИЕ1, ДЕЙСТВИЕ2	Список выражений

Порядок выполнения можно изменить с помощью круглых скобок “( )”. Их содержимое называется подвыражением (subexpression). Bash вычисляет значения подвыражений в первую очередь. Если подвыражений несколько, они вычисляются по порядку.

Префиксы для указания системы счисления константы
-------------------------------------------------
0	Восьмеричная		echo "$((071)) = 57"
0x	Шестнадцатеричная	echo "$((0xFF)) = 255"
0X	Шестнадцатеричная	echo "$((0XFF)) = 255"
<основание>#	Система с указанным основанием от 2 до 64	echo "$((16#FF)) = 255"
															echo "$((2#101)) = 5"

При выводе на экран или в файл Bash всегда переводит значения чисел в десятичную систему. Встроенная команда printf меняет формат вывода чисел. Её можно вызвать, например, так: 
printf "%x\n" 250
Эта команда выведет на экран число 250 в шестнадцатеричной системе. Аналогично можно вывести и значение переменной:
printf "%x\n" $var

$((30 / 7 )) - целочисленное деление (вернет 4)
$((30 / 7)) - остаток от деления (вернет 2)

if ((1 < var && var < 5))
then
  echo "Значение var меньше 5, но больше 1"
fi

if ((var < 1 || 5 < var))
then
  echo "Значение var меньше 1 или больше 5"
fi

Логическое НЕ редко применяется к самим числам. Чаще его используют для отрицания выражения. Если применить НЕ к числу, вывод результата соответствует POSIX-стандарту. Другими словами ноль означает истинна, а не ноль — ложь. Например:
if ((! var))
then
  echo "Значение var равно истина или ноль"
fi

Инкременты и декременты:
((++var))  ((--var)) ((var++)) ((var--))
Всегда используйте префиксную форму инкремента и декремента вместо постфиксной. Во-первых, она быстрее выполняется процессором. Потому что не надо сохранять текущее значение переменной. Во-вторых, с постфиксной формой легче допустить ошибку из-за неочевидного порядка присваивания.
Bash поддерживает операции присваивания с арифметическим действием, например: 
((var+=1)) ((var-=1)) и т.д.

Тернарная условная операция:
Для примера рассмотрим такой оператор if:
if ((var < 10))
then
  ((result = 0))
else
  ((result = var))
fi

Здесь переменной result присваивается ноль, если var меньше 10. В противном случае
result присваивается значение var.
Такое же поведение даст тернарный оператор. Он выглядит так:
((result = var < 10 ? 0 : var))
Одна строка заменила шесть строк конструкции if.

Тернарный оператор состоит из условного выражения и двух действий. В общем случае он
выглядит так:
(( УСЛОВИЕ ? ДЕЙСТВИЕ 1 : ДЕЙСТВИЕ 2 ))


Операторы цикла
---------------
В Bash есть два оператора цикла: while и for. Сначала познакомимся с оператором while. Он проще чем for. Синтаксис while напоминает условный оператор if. В общем виде он выглядит так:
while УСЛОВИЕ
do
  ДЕЙСТВИЕ
done

Оператор можно записать в одну строку:
while УСЛОВИЕ; do ДЕЙСТВИЕ; done

В конструкции while УСЛОВИЕМ и ДЕЙСТВИЕМ может быть одна команда или блок команд. Точно так же как в операторе if. ДЕЙСТВИЕ называется телом цикла (loop body). Выполнение while начинается с проверки УСЛОВИЯ. Если команда УСЛОВИЯ вернула нулевой код, оно считается истинным. В этом случае выполняется ДЕЙСТВИЕ. Дальше опять проверяется УСЛОВИЕ. Если оно по-прежнему истинно, снова выполняется ДЕЙСТВИЕ. Цикл прервётся тогда, когда УСЛОВИЕ станет ложным. Используйте цикл while, когда количество итераций заранее неизвестно. Например, при активном ожидании какого-то события.

Кроме while в Bash есть оператор цикла for. Используйте его, когда количество итераций известно заранее. У оператора for есть две формы. Первая нужна для последовательной обработки слов в строке. Во второй форме условием цикла выступает арифметическое выражение.

Начнём с первой формы for. В общем виде она выглядит так:
for ПЕРЕМЕННАЯ in СТРОКА
do
  ДЕЙСТВИЕ
done

В однострочном виде эта же конструкция записывается так:
for ПЕРЕМЕННАЯ in СТРОКА; do ДЕЙСТВИЕ; done

ДЕЙСТВИЕМ в конструкции for может быть одна команда или блок команд. Точно так же как в операторе while.

Скрипт для обработки слов в строке:
#!/bin/bash
for word in $1
do
  echo "$word"
done

Передаваемую в скрипт строку надо заключить в кавычки. Тогда она целиком попадёт в позиционный параметр $1. Например:
./for-string.sh "this is a string"

Проблему кавычек при передаче строки в скрипт можно решить. Замените в условии цикла
позиционный параметр $1 на $@. Получится такая конструкция for:
for word in $@
do
  echo "$word"
done

Теперь сработают оба варианта вызова скрипта:
./for-string.sh this is a string
./for-string.sh "this is a string"

Цикл for позволяет пройти по элементам индексируемого массива. Это работает так же, как перебор слов в строке. 
Скрипт для обработки всех элементов массива
#!/bin/bash
array=(Alice Bob Eve Mallory)
for element in "${array[@]}"
do
  echo "$element"
done
Скрипт для обработки первых трех элементов массива
#!/bin/bash
array=(Alice Bob Eve Mallory)
for element in "${array[@]:0:2}"
do
  echo "$element"
done

Другой вариант — перебирать в цикле не сами элементы, а их индексы. Запишем индексы нужных элементов через пробел. Затем пройдём по ним в цикле. Получится следующее:
array=(Alice Bob Eve Mallory)
for i in 0 1 2
do
  echo "${array[i]}"
done

array=(Alice Bob Eve Mallory)
for i in {0..2}
do
  echo "${array[i]}"
done

Во второй форме оператора for условием цикла выступает арифметическое выражение.
Скрипт для расчета факториала числа 5
#!/bin/bash
result=1
for i in {1..5}
do
  ((result *= $i))
done
echo "Факториал числа 5 равен $result"

Способы вызова утилиты seq:
seq 5 (конечное число) вернет последовательность 1 2 3 4 5
seq -2 2 (начало, конец) вернет последовательность -2 -1 0 1 2
seq 1 2 5 (начало, конец, шаг) вернет последовательность 1 3 5 
Например: for i in $(seq -3 3); do echo $i; done - вернет -3 -2 -1 0 1 2 3 

Скрипт для расчета факториала
#!/bin/bash
result=1
for i in $(seq $1)
do
  ((result *= $i))
done
echo "Факториал числа $1 равен $result"

Это решение работает. Однако, его нельзя назвать эффективным. В условии цикла for вызывается внешняя утилита. 

Для решения задачи нам пригодится вторая форма оператора for. В общем виде она выглядит так:
for (( ВЫРАЖЕНИЕ_1; ВЫРАЖЕНИЕ_2; ВЫРАЖЕНИЕ_3 ))
do
  ДЕЙСТВИЕ
done

В однострочном виде эта конструкция записывается так:
for (( ВЫРАЖЕНИЕ_1; ВЫРАЖЕНИЕ_2; ВЫРАЖЕНИЕ_3 )); do ДЕЙСТВИЕ; done

Цикл for с арифметическим условием работает так:
1. ВЫРАЖЕНИЕ_1 выполняется однократно перед первой итерацией цикла.
2. Цикл выполняется до тех пор, пока ВЫРАЖЕНИЕ_2 остаётся истинным. Как только оно
вернуло ложь в качестве результата, цикл завершается.
3. В конце каждой итерации выполняется ВЫРАЖЕНИЕ_3.

Скрипт для расчета факториала
#!/bin/bash
result=1
for (( i = 1; i <= $1; ++i ))
do
  ((result *= i))
done
echo "Факториал числа $1 равен $result"

Цикл завершается согласно своему условию. Кроме условия есть дополнительные средства для управления циклом. 

Встроенная команда break немедленно прекращает выполнение цикла. Она полезна для обработки ошибок или выхода из бесконечного цикла.

Скрипт для поиска элемента в массиве
#!/bin/bash
array=(Alice Bob Eve Mallory)
is_found="0"
for element in "${array[@]}"
do
  if [[ "$element" == "$1" ]]
  then
    is_found="1"
  break
  fi
done
if [[ "$is_found" -ne "0" ]]
then
  echo "Элемент со значением $1 есть в массиве"
else
  echo "Элемента со значением $1 нет в массиве"
fi

#!/bin/bash
array=(Alice Bob Eve Mallory)
for element in "${array[@]}"
do
  if [[ "$element" == "$1" ]]
  then
    echo "Элемент со значением $1 есть в массиве"
    exit 0
  fi
done
echo "Элемента со значением $1 нет в массиве"

Встроенная команда continue прекращает исполнение текущей итерации цикла. При этом цикл не завершится. Он продолжит выполняться со следующей итерации.

Скрипт для расчета суммы положительних чисел в массиве
#!/bin/bash
array=(1 25 -5 4 -9 3)
sum=0
for element in "${array[@]}"
do
  if (( 0 < element ))
  then
    ((sum += element))
  fi
done
echo "Сумма положительных чисел равна $sum"

Теперь используем команду continue:
#!/bin/bash
array=(1 25 -5 4 -9 3)
sum=0
for element in "${array[@]}"
do
  if (( element < 0))
  then
    continue
  fi
  ((sum += element))
done
echo "Сумма положительных чисел равна $sum"

Функции
-------
Функции доступны в обоих режимах Bash: командный интерпретатор и исполнение скриптов. 

Начнём с командного интерпретатора. В общем виде функция объявляется так:
ИМЯ_ФУНКЦИИ()
{
ДЕЙСТВИЕ
}
В одну строку функцию можно объявить так:
ИМЯ_ФУНКЦИИ() { ДЕЙСТВИЕ ; }
Обратите внимание на обязательную точку с запятой перед закрывающей фигурной скобкой}.

Тело функции ДЕЙСТВИЕ может быть одной командой или блоком команд.

В скриптах функции объявляются точно так же, как в командном интерпретаторе. Допускаются оба варианта объявления: стандартный и однострочный. Для примера вернёмся к проблеме обработки ошибок в большой программе. Объявим следующую функцию для вывода сообщений об ошибках:
print_error()
{
  >&2 echo "Произошла ошибка: $@"
}
Текст, объясняющий причину ошибки, передаётся в функцию через параметр. Допустим, наша программа читает файл на диске. Но файл оказался недоступен. Тогда сообщить о проблеме можно так:
print_error "файл readme.txt не найден"

Встречаются ситуация, когда одна функция должна вызвать другую. 

Напишем функцию для конвертирования кода ошибки в сообщение. Для конвертирования применим конструкцию case. Каждый блок case соответствует определённому коду ошибки.
Объявление функции выглядит так:
code_to_error()
{
  case $1 in
    1)
      echo "Не найден файл"
      ;;
    2)
      echo "Нет прав для чтения файла" 
      ;;
    esac
}

Теперь перепишем объявление функции print_error так:
print_error()
{
  echo "$(code_to_error $1) $2" >> debug.log
}

Вызов функции print_error выглядит, например, так:
print_error 1 "readme.txt"

В результате вызова в лог-файл запишется строка:
Не найден файл readme.txt

Первым параметром в функцию передаётся код ошибки. Вторым параметром — имя файла, который привёл к проблеме.

Чтобы вернуть результат функции, процедурные языки имеют встроенную команду. Обычно она называется return. В Bash эта команда тоже есть. Но её поведение отличается. Команда return в Bash не возвращает значение. Она передаёт код возврата, то есть целое число от 0 до 255.

Полный алгоритм вызова и выполнения функции выглядит так:
1. При выполнении команды встречается имя функции.
2. Интерпретатор переходит в тело функции и исполняет его с первой команды.
3. Если в теле функции встречается команда return, выполнение функции прекращается.
Bash переходит в место её вызова. В специальный параметр $? записывается кодвозврата функции. Это параметр команды return.
4. Если в теле функции нет return, Bash выполняет его до последней команды. После этого интерпретатор переходит в место вызова функции.

grep -R bashrc . - иногда мы не знаем, в каком файле то, что мы ищем, но знаем директорию (в примере - это домашний каталог), в которой лежит этот файл. В такой ситуации нужно сделать два изменения:
1. Добавить опцию -R, которая говорит о том, что надо искать внутри директории (рекурсивно, то есть включая все поддиректории).
2. Указать путь до директории, а не файла.
При таком поиске в выводе указывается файл, в котором была найдена строка. Если добавить опцию n, то дополнительно отобразится номер строки:
grep -Rn bashrc /home/mick - здесь рекурсивно ищем в домашнем каталоге пользователя mick
grep -C 3 aliases .bashrc - выведет все строки с подстрокой aliases + 3 предыдущие и 3 последующие строки для каждой из строк, содержащих подстроку aliases (с другими флагами: -A выводит предыдущие строки -B - последующие строки)

Ctr + r - рекурсивный поиск по истории команд (по мере ввода названия система выводит те или иные команды, наиболее подходящие для введенной последовательности)


BASH И КИБЕРБЕЗОПАСНОСТЬ
========================
Запуск команд bash из винды (cmd):
bash -c 'pwd' или, как вариант, ubuntu -c 'pwd'

Определение типа объекта (встроенная функция, ключевое слово и т.д.):
type -t pwd type -t ls type -t if

Список доступных команд: compgen -k

Команда handywork обработает данные из файла data.in, после чего результаты запишутся в файл results.out: 
handywork < data.in > results.out
как варианты (с потоком ошибок)
handywork < data.in > results.out 2>er.msgs
handywork < data.in > results.out 2>&1

Записывать в файл и одновременно выводить на экран результаты работы команды:
handywork < data.in | tee results.out

Дописывать в файл stdout и stderr результатов работы программы:
handywork < data.in &>> results.out 

Запись пингования в файл лога в фоновом режиме (отличный пример для демонстрации работы команды tail: tail -f ping.log):
ping 192.168.01.04 > ping.log &

Получение списка задач, выполняемых в фоновом режиме:
jobs

Выведение задач из фонового режима (номер задачи берется из результатов предыдущей команды):
fg 1

Возвращает общее количество параметров, переданных в скрипт:
$#

Возвращает код выполнения программы (0, если успех, иначе неуспех):
$? (используется с условными операторами if then else fi)

Извлекает пользовательский ввод из stdin:
1. печатаем read MYVAR, после чего вводим, например, Hi there!
2. печатаем echo $MYVAR и получаем вывод на экран Hi there!

if [[ -e $FILENAME ]]
then
echo file $FILENAME is exists
else
echo to file $FILENAME
fi

if [[ $VAL -lt $MIN ]]
then
echo "$VAL is too small"
fi

if (( $VAL < 12 ))
then
echo "$VAL is less than 12"
fi

if (( $? )); then echo 'previous command failed'; fi

Операторы сгруппированы двумя ключевыми словами - do и done:
i = 0
while (( i < 100 ))
do
echo i
let i++
done

while ls | grep -q pdf
do
echo -n 'file pwd was found: '
pwd
cd ..
done

for ((i=0; i<100; i++))
do
echo $i
done

for VAL in $(ls | grep pdf) {0..5}
do
echo $VAL
done

{first..last..step}

Канонический вид определения функции:
function myfunc () {
# это тело функции
}
И вызов функции:
myfunc 123 'abc' /root

