JavaScript
----------
mdn (mozilla developer network) - платформа для обучения веб-технологиям и ПО

Подключить файл с js-скриптом в html-файле:
<script src"script.js"></script>

Открыть консоль в браузере: F12 или ctrl + shift + j

В js-файле первой строкой скрипта для корректной работы кода желательно указывать 'use strict';

Ключевые слова для создания переменных: let и var(устаревший вариант, есть некоторое отличие от let)
let user;
user = 'Bob';
let user = 'Mick'; 
Имена переменных следуют верблюжей нотации, а также могут быть _ или $

Константы задаются с помощью ключевого слова const
Если значение константы вычисляется во время выполнения сценария, ее имя обычно пишут строчными буквами
const myNickname = 'docent';
conts pageLoadTime = ;
const COLOR_RED = "#F00";

Типы данных
1) nubmer ±(2**53-1)
Математические операции безопасны (можно делить на ноль, делить строку на число и т.д., крайним по критичности результатом станет NaN; ему же будет равен результат любой операции с его участием) благодаря "околочисленным" значениям Infinity, -Infinity, Nan

2) BigInt - введен для использования целочисленных значений произвольной длины

3) string - обратные кавычки (апострофы) привносят расширенную функциональность (встраивать выражение в строку)

4) boolean - true false

5) null - "ничего", "пусто", "значение неизвестно"

6) undefined - "значение не было присвоено"

Вышеперечисленные типы данных называются "примитивными" или "примитивами", поскольку их значениями могут быть только простые значения (число, строка, булевое значение)

7) object - тип данных, для хранения более коллекций или более сложных структур данных

8) symbol - тип данных, используемый для создания уникальных идентификатров в объектах

Оператор typeof возвращает тип аргумента. Есть две его синтаксические формы: typeof x и typeof(x)

Функция alert вызывает модальное окно, которое, пока оно открыто, не позволяет пользователю взаимодействовать с интерфейсом остальной части страницы

Функция prompt выводит модальное окно с полем для записи и кнопками ОК/Отмена. Функция принимает два аргумента: title - текст для отображения в окне, default - значение в поле по умолчанию
result = prompt(title, [default]); например, result = prompt('What is your name?', 'Bob');
квадратные скобки в функции означают, что этот аргумент факультативный, необязательный
Вызов prompt возвращает введенное значение, либо null, если ввод был отменен пользователем 
let age = prompt('How old are you?', 100);
alert(`You are ${age} years old.`);

Функция confirm отображает модальное окно с текстом вопроса и двумя кнопками: OK и Отмена
Результат - true если  нажата кнопка OK, а остальных случаях - false

let isBoss = confirm('Are you a Boss here?');
alert(isBoss);

Преобразование типов: строковое, численное, логическое
alert(value); - преобразует в строку
String(value); - также преобразует в строку
Number(value); - преобразует в число (если не удается, возвращает NaN)
Boolean(value); - преобразует в true  или false

Операнд - то, к чему применяется оператор. Унарный оператор применяется к одному операнду (-2), бинарный - к двум (x = 3)
% - остаток от деления, ** - возведение в степень, + для строк поддерживает операцию конкатенации
alert(6 - '2'); // 4, '2' приводмтся к числу
alert('6' / '2'); // 3, оба операнда приводмтся к числу
Оператор + преобразует нечисла в числа: +true -> 1; +"" -> 0
let apples = '2'; let oranges = '3'; alert(+apples + +oranges); // 5
Присваивание по цепочке: let a, b, c; a = b = c = 2 + 3;
Сокращенная арифметика: let n = 2; n += 3; n *= 4; n *= 3 + 5;
Инкременты и декременты: ++n; n++; --n; n--;
Побитовые операторы: AND (и) (&); OR (или) (||); XOR (побитовое исключающее или) (^);  NOT(не)(~) и др.
Оператор "," - имеет низкий приоритет; берется только последнее вычисление
for(a = 1, b = 2, c = a * b; a < 10; a++) {...}
Операторы сравнения, в т.ч. нестрогое == и строгое сравнение ===
Операторы ветвления
let year = prompt('В каком году была опубликована спецификация ES-2015?');
if (year < 2015) {
    alert( "Рановато");
} else if (year > 2015) {
    alert("Поздновато");
} else {
    alert("Верно!");
}
Условный оператор "?"
let result = условие ? значение1 : значение2; 
let accessAllowed = (age > 18) ? true: false;
Использование ? в качестве оператора if
let company = prompt('Какая компания создала javascript?');
(company == 'Netscape') ? alert('Верно') : alert('Неправильно');


Ждем пока не загрузится dom-дерево и находим элемент c классом 'block':
----
window.addEventListener('DOMContnetLoaded', function() {
    console.log(document.querySelector('.block'))
})

Ждем загрузки dom-дерева и меняем цвет букв первого параграфа, отмеченного классом 'title' на синий:
----
window.addEvevtListener('DOMContentLoaded', function() {
    document.querySelector('.text').style.color = 'blue'
})

В коде js принято названия стилей css писать кэмэлкейсом, например: background-color - backgroundColor


Ждем загрузки dom-дерева, потом находим элемент с id 'burger', ждем наступления события (клик на этот элемент - кнопку), после чего показывается/пропадает элемент с id 'menu':
----
window.addEventListener('DOMContentLoaded', function() {
    document.querySelector('#burger').addEventListener('click', function() {
         document.querySelector('#menu').ClassList.toggle('is-active')
    })
})

После загрузки dom-дерева можем выделять кликом любые элементы страницы (менять цвет с черного на красный и обратно), имеющие класс 'text':
----
window.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.text').forEach(function(el) {
        el.addEventListener('click', function(event) {
            event.target.classList.toggle('alert')
        })
    })
})

Скачивание и установка пакета nodejs
------------------------------------
$ sudo apt-get install curl
$ curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash -
$ sudo apt install -y nodejs

При подключении эмулятора андроида к разработке вылезает ошибка отностительно adb (какой-то там андроидный бридж). Решить ее (одну из связанных с этим проблем) можно так:
sudo  ln -s ~/Android/Sdk/platform-tools/adb /bin/abd 

fonts.google.com - шрифты от гугла

react-google-charts - библиотека от гугла для создания реакт-компонент, отрисовывающих различные графики

Скачивание, установка и использование nvm (nodejs version manager)
------------------------------------------------------------------
nvm - менеджер версий NodeJS
Установка для линукс (используем любую из команд)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
nvm list-remote - выведет доступные версии node в удаленном репо
nmv ls - посмотреть список версий node, установленных на машине
nvm install 12 - устанавливаем 12-ю версию nodejs (после этого автоматически происходит переключение на 12-ю версию)
nvm use 14 - переключаемся 14-ю версию (предполагается, что она установлена на машину)
nvm alias default 16 - устанавляем версию node по умолчанию

Установка компилятора typescript
--------------------------------
typescript - это надмножество javascript (любой js-код будет валидным для ts), основная задача ts - привнести типы в нетипизированный язык js.
npm i -g typescript - установка на глобальном уровне
tsc - typescript compilier - утилита, позволяющая компилировать файлы ts в js файлы (создается ts-файл, после чего вызывается tsc, создающая js-файл)
tsc --init - инициализирует json-файла для конфигурации ts (tsconfig.json)

npm i -D @types/react - устанавливаем зависимость в проекте на react для использования ts

npm search <что ищете, напрпример, axios> - выдаст список пакетов, в названии или описании которых есть слово axios
npm dedup - устраняет дубликаты установленных зависимостей в структуре node_module
npm audit - выдает результаты просмотра выявленных уязвимостей
npm list -g --depth=0 | grep <module_name> - поиск пакета в списке установленных глобально на машине

npx - утилита, позволяющая исполнять npm-пакеты

npx create-next-app --help - какие опции доступны при создании проекта на next

npx create-next-app top-app --use-npm - указываем название проекта и определяем, что будет использовать именно npm, а не yarn

Установка nodejs с использованием PPA (personal package archive)
----------------
cd ~
curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
nano nodesource_setup.sh
sudo bash nodesource_setup.sh
node -v

Создание приложения react с помощью create-react-app
-------------------------
1-й вариант:
	mkdir my_react_app
	cd my_react_app
	npx create-reac-app .
2-й вариант:
	npx create-react-app my_react_app

Создание и настройка CRA c typescript
-------------------------------------
npx create-react-app <name of project> --template typescript

