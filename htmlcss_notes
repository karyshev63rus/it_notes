Здесь будет информация об основах верстки
-----------------------------------------
Варианты верстки flex и grid имеют много общего, что хорошо

display: flex / display: grid - здесь определяется выбор верстки
Например, 
body {
    background-color: red;
    ....
}
.container {
    display: grid;
    grid-template-column: 1fr 1fr 1fr;
    grid-auto-rows: 100px;
    ...
}
.container > div {
    ...
    align-items: center;
    justify-content: center;
}


Верстка "на гридах"
-------------------
----------------------
lorem25 - создаст произвольный текст из 25 слов

.grid {
  display: grid;
  grid-template-columns: 150px 1fr 150px; 
  grid-template-columns: 150px min-content max-content 150px; 
  grid-template-columns: 150px minmax(100px, 1fr) minmax(200px, 300px) 150px;
  grid-template-rows: minmax(100px 1fr) 150px 200px;
  grid-template-columns: [left] 200px [content] 1fr [content] 1fr [right] 200px;
  grid-template-columns: [left] 200px repeat(2, [content] 1fr) [right] 200px;
  grid-template-rows: [top] 100px [middle] 100px [bottom] 100px;
  grid-column-gap: 20px;
  grid-row-gap: 10px;
  grid-gap: 10px 20px;
}

.grid_element {
  grid-column-start: 4;
  grid-row-start: 3;
  grid-column-end: 5;
  grid-row-end: 3;
  grid-column-end: -1;
  grid-row-end: -1;
  grid-column: 4 / -1;
  grid-row: 3 / -1;
  grid-area: 4 / 3 / -1 / -1;
}

------------------------
.grid {
  display: grid;
//  grid-template-columns: minmax(70px, 250px) repeat(3, auto) minmax(70px, 250px);
//  grid-template-rows: repeat(5, 2fr);
  grid-gap: 10px;
  grid-templare-areas:
      'header header header header header'
	  'aside-left content content content content aside-right'
	  'aside-left content content content content aside-right'
	  'aside-left content content content content aside-right'
	  'footer footer footer footer footer'; (вместо элементов можно указывать точки, тогда на месте этих элементов будет пустое поле)
}

.grid-element {
...
padding: 20px;
border-radius: 20px;
text-align: center;
border: 1px solid #000;
}

.header {
//  grid-column: 1 / -1;
  grid-area: header;
}

.aside-left {
//  grid-row: span 3;
  grid-area: aside-left;
}

.content {
//  grid-column: 2 / 5;
//  grid-row: span 3;
  grid-area: content;
}

.aside-right {
//  grid-row: span 3;
  grid-area: aside-right;
}

.footer {
//  grid-column: 1 / -1;
  grid-area: footer;
}

---------------

.grid {
  grid: display;
  grid-template-columns: repeat(3, 150px);
  grid-template-rows: repeat(3, 150px);
  justify-content: start; (end, center, stretch, space-between, space-around, space-evenly) // выравнивание по горизонтали
  align-content: start; // выравнивание по вертикали
  justify-items: start; // то же, но для отдельных строк и столбцов
  align-items: start;
}

.first { // задан класс одному из элементов
  justify-self: start; //  то же, что и для всех элементов, но применительно
  align-self: start; // к отдельным элементам
}

----------------------

.grid {
  display: grid;
  grid-auto-flow: column; (row) // элементы распределятся, соответственно, по колонкам и по строкам
  grid-auto-flow: row dense; // размещение элементов происходит "немного по-другому"
}

.grid-element:nth-child(3) {
  grid-column: span 2;
  order: 1;
}

------------------- 
.grid {
  display: grid;
  drid-template-columns: repeat(auto-fit, minmax(150px, auto)); (auto-fill)
}


Верстка на основе flexbox
-------------------------
начальная настройка css
 * {
  margin: 0;
  padding: 0;  
}

body {
  font-family: Arial;
  font-size: 16px;
}

.container {
  max-width: 1200px;
  min-width: 320px;
  height: 500px;
  background-color: #eee;
  margin: 100px auto;
  padding: 10px 0;
}

.container_element {
  border: 1px solid #000;
  padding: 10px 20px;
  box-sizing: border-box;
  margin: 20px;
}

----------
применяем flex

.container {
  display: flex; (inline-flex) // блоки были расположены как стэк, а теперь рядом друг с другом
}

---------------
св-ва, применяемые к flex-контейнеру

flex-direction

.container {
  display: flex;
  flex-direction: row; //значение по умолчанию - главная ось (горизонтальная), row-reverse поменяет направление справа-налево, column - оси (главная и поперечная) меняются местами, и блоки будут расположены как стэк и растянутся вдоль поперечной оси (т.е. горизонтально), column-reverse - то же, но снизу вверх.
  flex-wrap: nowrap; (wrap, wrap-reverse) // блоки как бы оборачиваются границами строки
}
----------------
св-ва, применяемые в целом к блокам flex-контейнера

.container {
  justify-content: flex-start; (flex-end, flex-center, space-between, spase-around) - расположение блоков вдоль главной (горизонтальной) оси
  align-items: stretch; определяет расположение блоков по поперечной (вертикальной) оси (используются те же flex-..., а также baseline)   
}

.container {
  ...
  flex-wrap: wrap;
  align-content: flex-start; - примерно то же, но работает при наличии wrap
}

------------------
св-ва, применяемые к отдельным блокам (работает только в направлении поперечной оси)

.container_element:first-child { // .container_element:nth-child(2)
  align-self: flex-start;(flex-end, center, stretch)
  order: 0; (1,2,... -1)
}

-------------------------
.container {
  display: flex;
  flex-direction: columns;
  flex-wrap: wrap;
}

.container_element {
  flex-grow: 0; (если будет 1, элемент займет всю доступную ширину контейнера)
  flex-basis: 300px;
  flex-shrink: 1; (если будет 0, элементы ужиматься не будут)
}  

