Регулярные выражения (РВ) представляю собой образцы текста, или шаблоны, предназначенные для сопоставления с текстовыми подстроками и описываемые с помощью специального формального синтаксиса.

search() - получает в качестве аргументов шаблон и текст, возвращает объект Match, если найдено совпадение с шаблоном, или None, если не найдено.

match = re.search(pattern, text)
s = match.start()
e = match.end()
print(match.re.pattern, match.string, s, e, text[s:e])
где: string - атрибут объекта match, равный значению исходной строки

compile() - преобразует строку регулярного выражения в объект RegexObject
regex = re.compile(pattern)
if regex.search(text):
    print('match!')
else:
    print('no match')

findall() - возвращает все неперекрывающиеся подстроки, совпадающие с шаблоном 
text = 'abbabbaaa'
pattern = 'ab'
print(re.findall(pattern, text)) -> ['ab', 'ab']

findeter() -в отличие от findall() эта функция возвращает итератор,
создающий экземпляры Match    
    
5 способов указания повторения шаблона:
* - шаблон, за который следует этот метасимвол, может повторяться нуль или более раз
+ - шаблон должен встретиться по крайней мере один раз 
? - встретиться один нуль или один раз
{m} - минимальное количество требуемых повторений
{m, n} - минимальное и максимальное количество требуемых повторений
как вариант {m, } - встретиться как минимум m раз, максимум не ограничен
например, [ab*], [ab+] и т.д.

Набор символов - это группа символов, любой из которых может считаться совпадением в данной позиции шаблона. Например [ab] совпадет с a или b
Жадная форма выражения (a[ab]+) пытается захватить всю строку, поскольку первой буквой в ней является a, а все последующие символы - это либо а, либо b
Для отмены жадного поведения следует поместить после инструкции повторения символ ?

Символ "крышка" или циркумфлекс (^) означает поиск символов, не входящих в  набор символом, следущих за циркумфлексом, например: '[^-.]+'

Компактная запись диапазона символьного набора найдет в строке 'This is some text --- with punctuation.'
'[a-z]+' - 'his', 'is', 'some', 'text', 'with', 'punctuation'
'[A-Z]+' - 'T'
'[a-zA-Z]+' - 'This', 'is', 'some', 'text', 'with', 'punctuation'
'[A-Z][a-z]+' - 'This'

Метасимвол "точка" (.) - специальный случай: шаблон будет совпадать с любым одиночным символом, находящися в этой позиции 

Специальные символы (например, \d+, \S+, \w+, \W+)
\d - цифра
\D - любой нецифровой символ
\s - пробельный символ (табуляция, пробел, перевод строки и т.д.)
\S - любой символ, не являющийся пробельным
\w - алфавитно-цифровой символ
\W - любой символ, не являющийся алфавитно-цифровым

Во избежание экранирования \ следует использовать "сырые" строки: r'  ', например, r'\d+ \D+ \s+'

Якорные привязки  - указание относительных позиций в исходном тексте, в которых должен встретиться шаблон. Например, r'^\w+' или r'\D+\S$' - в первом случае строка должна начинаться с буквы или цифры, во втором - заканчиваться цифрой, после которой идет любой символ, не являющийся пробельным

Коды якорных привязок
^ - начало логической или физической строки 
$ - конеч логической или физической строки
\A - начало логической строки
\Z - конец логической строки
\b - пустая строка в началае или конце слова (граница слова)
\B - пустая строка, расположенная не в начале иои в конце слова

Отделение совпадений с помощью групп - добавление групп в шаблон изолирует отдельные составляющие  совпадающего текста; группы определяются посредством заключения шаблонов в круглые скобки
например, 'a(ab)', 'a(a*b*)' и т.д.

groups() - обеспечивает доступ ко всем подстрокам, совпавшим с отдельными группами шаблона; объект Match

Вызов Match.groups() возвращает последовательность строк в том порядке, в котором группы встречаются в выражении, сопоставляемом со строкой
group() - доступ к подстроке, совпавшей с какой-то одной группой (указывается номер группы, например, match.group(1))


