Здесь будет информация о СУБД: как, что и зачем (акцент на работу с postgres в командной строке)
-----------------------------------

==========
POSTGRESQL
==========

УСТАНОВКА И УДАЛЕНИЕ сервера и всего прочего, связанного с postgresql
--------------------
sudo apt install posrgreql postgresql-contrib - установка СУБД Postgresql
sudo apt-get --purge remove postgresql postgresql-12  postgresql-client  postgresql-client-12 postgresql-client-common postgresql-common  postgresql-contrib postgresql-contrib-12 - команда для сноса всего


СОЗДАЕМ БАЗУ ДАННЫХ на сервере postgresql, например, для подключения к ней django-проекта:
-------------------
1. sudo service postgresql start - запустить сервер с БД 
2. sudo -i -u postgres psql - открыть сессию работы с БД 
3. CREATE DATABASE <dbname>; - создать БД для проекта (здесь можно добавить OWNER postgres, и всё!)
4. CREATE USER 	<dbusername> WITH PASSWORD '<password>'; - создать пользователя с паролем (кавычки обязательны)
5. GRANT ALL PRIVILEGES ON DATABASE <dbname> TO <dbusername>; - права админа БД
6. \q - закрыть сессию
7. данные о созданных базе и пользователе прописываем в файле # settings.py


ПОЛЕЗНЫЕ КОМАНДЫ
----------------
\? - список всех команд
\h - помощь
\l - список БД
\s - история команд
\conninfo - информация о текущем соединении (например, "You are connected to database 'postgres' as user 'postgres' via socket in '/var/run/postgresql' at port '5432'.")
\d - список таблиц и последовательностей (seq - что-то вроде вспомогательных таблиц или с номерами записей в основных таблицах) в текущей БД
\dt - список таблиц
\dt+ - список таблиц с описанием
\dt *str* - список таблиц, содержащих str в имени
\du - список пользователей и предоставленных им привелегий
\c имя_БД - переключение на другую БД внутри psql/var/log/postgresql/postgresql-12-main.log - логи

УСТАНОВКА ПАРОЛЯ ДЛЯ ПОЛЬЗОВАТЕЛЯ POSTGRES
------------------------------------------
sudo passwd postgres - устанавливаем пароль, открываем другую сессию (перезагружаемся) и пытаемся войти под именем postges с использованием нового пароля. Вероятно, появится сообщение, что такой пользователь не входит в группу sudoers. 
Можно решить проблему командой: usermod -a -G sudo postgres
А можно и по хардкору. Открываем файл /etc/sudoers через sudo и добавляем в него после строки 
#Allow members of group sudo to execute any command строку postgres ALL=(ALL)  ALL. Далее сохраняемся (вводим команду w!), выходим и перезагружаемся. В новой сессии входим командой su - postgres с использованием установленного нами пароля.
Теперь заходим в два приема: 1) su - postgres (становимся postgres -ом) и далее 2) psql (открывается консоль БД)

СЛУЧАИ
------
Была проблема: программа с Postgres ставится и сервер запускается, но после перезагрузки компьютера при попытке запуска появляется ошибка - нет папки по адресу /var/run/postgresql.
Создавал такую папку, но вываливались новые ошибки - нет доступа. В итоге пришлось создать такую папку и поменять ее владельца:
cd /var/run/; mkdir postgresql; chown postgres:postgres postgresql - и, наконец-то, сервер стал запускаться и после перезагрузки системы (т.е. компа)
---------------------------------

=====
REDIS
=====

Установка на ubuntu:
--------------------
1. sudo apt install redis-server - устанавливаем серверную базу данных redis через менеджер пакетов apt
2. sudo vim /etc/redis/redis.conf - открываем конфгурационный файли правим строку "supervised no", заменяя 'no' на 'systemd'
3. sudo systemctl restart redis.service - перезапускаем сервер redis для вступления изменений в силу 
:
Для WSL2
--------
1. вводится дополнительная команда: sudo systemctl enable redis-server.service 
2. после чего запускается сервер: sudo service redis-server start

Тестирование redis:
-------------------
sudo systemctl status redis (для WSL2 не работает)

Работа в терминале:
-------------------
1. redis-server - запуск сервера redis
2. redis-cli - подключение к серверу с помощью клиента командной строки

========
RABBITMQ
========

Установка брокера
-----------------
sudo apt-get update -y
sudo apt-get install -y rabbitmq-server 

Работа с брокером
-----------------
sudo service rabbitmq-server status - проверка статуса
--- stop - остановка сервера
--- start - запуск сервера

================
DJANGO DATABASES
================

python manage.py dbshell - открывается консоль используемой базы данных (например, postgresql) от имени владельца базы данных, "привязанной" к данному приложению django.

- "POSTGRES_HOST_AUTH_METHOD=trust" - указываем в docker-compose.yml вместо пароля


